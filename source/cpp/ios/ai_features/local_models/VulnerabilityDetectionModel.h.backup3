#pragma once

#include "LocalModelBase.h"
#include <string>
#include <vector>
#include <set>
#include <map>
#include <functional>

namespace iOS {
namespace AIFeatures {
namespace LocalModels {

/**
 * @enum VulnType
 * @brief Types of vulnerabilities that can be detected
 */
enum class VulnType {
    SQL_INJECTION,
    XSS,
    CODE_INJECTION,
    COMMAND_INJECTION,
    BUFFER_OVERFLOW,
    PATH_TRAVERSAL,
    DENIAL_OF_SERVICE,
    UNAUTHORIZED_ACCESS,
    INSECURE_SERIALIZATION,
    MEMORY_LEAKS,
    INFORMATION_DISCLOSURE,
    PRIVILEGE_ESCALATION,
    UNSANITIZED_INPUT,
    OTHER
};

/**
 * @brief Convert vulnerability type to string
 * @param type Vulnerability type
 * @return String representation
 */
std::string VulnTypeToString(VulnType type);

/**
 * @brief Convert string to vulnerability type
 * @param str String representation
 * @return Vulnerability type or VulnType::OTHER if not recognized
 */
VulnType StringToVulnType(const std::string& str);

/**
 * @class VulnerabilityDetectionModel
 * @brief Model for detecting potential vulnerabilities in code
 * 
 * This model analyzes scripts and identifies potential security vulnerabilities
 * using a combination of pattern matching and more advanced ML techniques.
 */
class VulnerabilityDetectionModel : public LocalModelBase {
public:
    /**
     * @struct Vulnerability
     * @brief Represents a detected vulnerability
     */
    struct Vulnerability {
        VulnType type;              // Type of vulnerability
        int lineNumber;             // Line number where vulnerability was detected
        std::string description;    // Description of the vulnerability
        std::string snippet;        // Code snippet containing the vulnerability
        int severity;               // Severity level (1-5, 5 being most severe)
        std::string recommendation; // Recommended fix
        
        Vulnerability() 
            : type(VulnType::OTHER), lineNumber(-1), severity(1) {}
        
        Vulnerability(VulnType t, int line, const std::string& desc, 
                    const std::string& snip, int sev, const std::string& rec)
            : type(t), lineNumber(line), description(desc), 
              snippet(snip), severity(sev), recommendation(rec) {}
    };
    
    /**
     * @brief Constructor
     */
    VulnerabilityDetectionModel();
    
    /**
     * @brief Destructor
     */
    virtual ~VulnerabilityDetectionModel();
    
    /**
     * @brief Initialize the model
     * @param path Path to model files
     * @return True if initialization succeeded
     */
    bool Initialize(const std::string& path);
    
    /**
     * @brief Load the model from disk
     * @return True if load succeeded
     */
    bool Load();
    
    /**
     * @brief Save the model to disk
     * @return True if save succeeded
     */
    bool Save();
    
    /**
     * @brief Train the model
     * @return True if training succeeded
     */
    bool Train();
    
    /**
     * @brief Detect vulnerabilities in a script
     * @param script Script to analyze
     * @return Vector of detected vulnerabilities
     */
    std::vector<Vulnerability> DetectVulnerabilities(const std::string& script);
    
    /**
     * @brief Get all detectable vulnerability types
     * @return Set of all vulnerability types the model can detect
     */
    std::set<VulnType> GetAllDetectableVulnerabilityTypes() const;
};

} // namespace LocalModels
} // namespace AIFeatures
} // namespace iOS
