
#include "../../ios_compat.h"
#include <string>
#include <memory>
#include <functional>
#include <vector>
#include <mutex>
#include <chrono>
#include <iostream>

// Forward declaration
#include "../ai_features/vulnerability_detection/VulnerabilityDetector.h"

namespace iOS {
    namespace UI {
        // UI for vulnerability detection
        class VulnerabilityViewController {
        private:
            // Objective-C view controller
            void* m_viewController;
            
            // UI elements
            void* m_scanButton;
            void* m_resultsTableView;
            void* m_detailsView;
            void* m_exploitButton;
            void* m_progressIndicator;
            
            // Callbacks
            std::function<void()> m_scanButtonCallback;
            std::function<void(AIFeatures::VulnerabilityDetection::VulnerabilityDetector::Vulnerability const&)> m_exploitButtonCallback;
            
            // Data
            std::shared_ptr<AIFeatures::VulnerabilityDetection::VulnerabilityDetector> m_vulnerabilityDetector;
            std::vector<AIFeatures::VulnerabilityDetection::VulnerabilityDetector::Vulnerability> m_vulnerabilities;
            std::mutex m_vulnerabilitiesMutex;
            bool m_scanInProgress;
            float m_scanProgress;
            
            // Selected vulnerability
            int m_selectedVulnerabilityIndex;
            
        public:
            VulnerabilityViewController();
            ~VulnerabilityViewController();
            
            void Initialize();
            void SetScanButtonCallback(std::function<void()> callback);
            void SetExploitButtonCallback(std::function<void(AIFeatures::VulnerabilityDetection::VulnerabilityDetector::Vulnerability const&)> callback);
            void SetVulnerabilityDetector(std::shared_ptr<AIFeatures::VulnerabilityDetection::VulnerabilityDetector> detector);
            void StartScan(const std::string& path1, const std::string& path2);
            void* GetViewController() const;
            
        private:
            void CreateUI();
            void UpdateUI();
            void UpdateProgress(float progress, const std::string& status);
            void ShowVulnerabilityDetails(int index);
        };
        
        // VulnerabilityViewController implementation
        VulnerabilityViewController::VulnerabilityViewController()
            : m_viewController(nullptr),
              m_scanButton(nullptr),
              m_resultsTableView(nullptr),
              m_detailsView(nullptr),
              m_exploitButton(nullptr),
              m_progressIndicator(nullptr),
              m_scanInProgress(false),
              m_scanProgress(0.0f),
              m_selectedVulnerabilityIndex(-1) {
        }
        
        VulnerabilityViewController::~VulnerabilityViewController() {
            // Release retained Objective-C objects
            if (m_viewController) {
                CFRelease(m_viewController);
                m_viewController = nullptr;
            }
        }
        
        void VulnerabilityViewController::Initialize() {
            dispatch_async(dispatch_get_main_queue(), ^{
                // Create UI elements
                CreateUI();
            });
        }
        
        void VulnerabilityViewController::SetScanButtonCallback(std::function<void()> callback) {
            m_scanButtonCallback = callback;
        }
        
        void VulnerabilityViewController::SetExploitButtonCallback(
            std::function<void(AIFeatures::VulnerabilityDetection::VulnerabilityDetector::Vulnerability const&)> callback) {
            m_exploitButtonCallback = callback;
        }
        
        void VulnerabilityViewController::SetVulnerabilityDetector(
            std::shared_ptr<AIFeatures::VulnerabilityDetection::VulnerabilityDetector> detector) {
            m_vulnerabilityDetector = detector;
        }
        
        void VulnerabilityViewController::StartScan(const std::string& path1, const std::string& path2) {
            if (!m_vulnerabilityDetector || m_scanInProgress) {
                return;
            }
            
            m_scanInProgress = true;
            UpdateProgress(0.0f, "Starting scan...");
            
            // Clear previous results
            {
                std::lock_guard<std::mutex> lock(m_vulnerabilitiesMutex);
                m_vulnerabilities.clear();
            }
            
            // Update UI
            UpdateUI();
            
            // Start the scan in a background thread
            dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
                // Create a game object (root object) for scanning
                auto gameRoot = std::make_shared<AIFeatures::VulnerabilityDetection::VulnerabilityDetector::GameObject>();
                gameRoot->m_name = "Game";
                gameRoot->m_className = "DataModel";
                gameRoot->m_path = "game";
                
                // Set progress callback
                auto progressCallback = [this](const AIFeatures::VulnerabilityDetection::VulnerabilityDetector::ScanProgress& progress) {
                    UpdateProgress(progress.m_progress, progress.m_currentActivity);
                };
                
                // Set completion callback
                auto completeCallback = [this](const AIFeatures::VulnerabilityDetection::VulnerabilityDetector::ScanResult& result) {
                    // Save results
                    {
                        std::lock_guard<std::mutex> lock(m_vulnerabilitiesMutex);
                        m_vulnerabilities = result.m_vulnerabilities;
                    }
                    
                    // Update UI on main thread
                    dispatch_async(dispatch_get_main_queue(), ^{
                        m_scanInProgress = false;
                        UpdateUI();
                        
                        // Show alert with results
                        UIViewController* viewController = (__bridge UIViewController*)m_viewController;
                        UIAlertController* alert = [UIAlertController 
                            alertControllerWithTitle:@"Scan Complete" 
                            message:[NSString stringWithFormat:@"Found %lu vulnerabilities", (unsigned long)result.m_vulnerabilities.size()]
                            preferredStyle:UIAlertControllerStyleAlert];
                        
                        [alert addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleDefault handler:nil]];
                        [viewController presentViewController:alert animated:YES completion:nil];
                    });
                };
                
                // Start the scan
                std::string gameId = "Game-" + std::to_string(std::chrono::system_clock::now().time_since_epoch().count());
                std::string gameName = path1.empty() ? "Current Game" : path1;
                
                m_vulnerabilityDetector->StartScan(gameId, gameName, gameRoot, progressCallback, completeCallback);
            });
        }
        
        void* VulnerabilityViewController::GetViewController() const {
            return m_viewController;
        }
        
        void VulnerabilityViewController::CreateUI() {
            // Create the view controller
            UIViewController* viewController = [[UIViewController alloc] init];
            viewController.view.backgroundColor = [UIColor colorWithWhite:0.1 alpha:1.0];
            m_viewController = (__bridge_retained void*)viewController;
            
            // Create a container view
            UIView* containerView = [[UIView alloc] initWithFrame:viewController.view.bounds];
            containerView.autoresizingMask = UIViewAutoresizingFlexibleWidth | UIViewAutoresizingFlexibleHeight;
            [viewController.view addSubview:containerView];
            
            // Create scan button
            UIButton* scanButton = [UIButton buttonWithType:UIButtonTypeSystem];
            scanButton.frame = CGRectMake(20, 20, 100, 40);
            [scanButton setTitle:@"Scan" forState:UIControlStateNormal];
            scanButton.backgroundColor = [UIColor colorWithRed:0.2 green:0.6 blue:1.0 alpha:0.8];
            scanButton.layer.cornerRadius = 8.0;
            [scanButton setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
            [containerView addSubview:scanButton];
            
            // Set button action
            [scanButton addTarget:nil action:@selector(scanButtonTapped:) forControlEvents:UIControlEventTouchUpInside];
            
            __weak typeof(self) weakSelf = (__bridge typeof(self))this;
            IMP scanButtonAction = imp_implementationWithBlock(^(id _Nullable sender) {
                if (weakSelf && weakSelf->m_scanButtonCallback) {
                    weakSelf->m_scanButtonCallback();
                }
            });
            
            class_addMethod([UIButton class], @selector(scanButtonTapped:), scanButtonAction, "v@:@");
            
            m_scanButton = (__bridge_retained void*)scanButton;
            
            // Create progress indicator
            UIProgressView* progressView = [[UIProgressView alloc] initWithProgressViewStyle:UIProgressViewStyleDefault];
            progressView.frame = CGRectMake(130, 40, containerView.bounds.size.width - 150, 20);
            progressView.autoresizingMask = UIViewAutoresizingFlexibleWidth;
            progressView.progress = 0.0;
            progressView.hidden = YES;
            [containerView addSubview:progressView];
            
            m_progressIndicator = (__bridge_retained void*)progressView;
            
            // Create table view for results
            UITableView* tableView = [[UITableView alloc] initWithFrame:CGRectMake(20, 70, 
                                                                                 containerView.bounds.size.width - 40, 
                                                                                 containerView.bounds.size.height - 270)
                                                              style:UITableViewStylePlain];
            tableView.autoresizingMask = UIViewAutoresizingFlexibleWidth | UIViewAutoresizingFlexibleHeight;
            tableView.backgroundColor = [UIColor colorWithWhite:0.15 alpha:1.0];
            tableView.layer.cornerRadius = 8.0;
            tableView.layer.masksToBounds = YES;
            [containerView addSubview:tableView];
            
            // Set up table view
            tableView.delegate = nil;
            tableView.dataSource = nil;
            
            // Store the table view
            m_resultsTableView = (__bridge_retained void*)tableView;
            
            // Create details view
            UIView* detailsView = [[UIView alloc] initWithFrame:CGRectMake(20, containerView.bounds.size.height - 190, 
                                                                        containerView.bounds.size.width - 40, 180)];
            detailsView.autoresizingMask = UIViewAutoresizingFlexibleWidth | UIViewAutoresizingFlexibleTopMargin;
            detailsView.backgroundColor = [UIColor colorWithWhite:0.15 alpha:1.0];
            detailsView.layer.cornerRadius = 8.0;
            detailsView.layer.masksToBounds = YES;
            [containerView addSubview:detailsView];
            
            // Add labels to details view
            UILabel* titleLabel = [[UILabel alloc] initWithFrame:CGRectMake(10, 10, detailsView.bounds.size.width - 20, 30)];
            titleLabel.autoresizingMask = UIViewAutoresizingFlexibleWidth;
            titleLabel.text = @"Select a vulnerability";
            titleLabel.textColor = [UIColor whiteColor];
            titleLabel.font = [UIFont boldSystemFontOfSize:16.0];
            titleLabel.tag = 101;
            [detailsView addSubview:titleLabel];
            
            UILabel* descriptionLabel = [[UILabel alloc] initWithFrame:CGRectMake(10, 40, detailsView.bounds.size.width - 20, 60)];
            descriptionLabel.autoresizingMask = UIViewAutoresizingFlexibleWidth;
            descriptionLabel.text = @"";
            descriptionLabel.textColor = [UIColor lightGrayColor];
            descriptionLabel.font = [UIFont systemFontOfSize:14.0];
            descriptionLabel.numberOfLines = 3;
            descriptionLabel.tag = 102;
            [detailsView addSubview:descriptionLabel];
            
            UILabel* severityLabel = [[UILabel alloc] initWithFrame:CGRectMake(10, 100, 150, 20)];
            severityLabel.text = @"Severity: N/A";
            severityLabel.textColor = [UIColor lightGrayColor];
            severityLabel.font = [UIFont systemFontOfSize:12.0];
            severityLabel.tag = 103;
            [detailsView addSubview:severityLabel];
            
            UILabel* reliabilityLabel = [[UILabel alloc] initWithFrame:CGRectMake(160, 100, 150, 20)];
            reliabilityLabel.text = @"Reliability: N/A";
            reliabilityLabel.textColor = [UIColor lightGrayColor];
            reliabilityLabel.font = [UIFont systemFontOfSize:12.0];
            reliabilityLabel.tag = 104;
            [detailsView addSubview:reliabilityLabel];
            
            // Create exploit button
            UIButton* exploitButton = [UIButton buttonWithType:UIButtonTypeSystem];
            exploitButton.frame = CGRectMake(detailsView.bounds.size.width - 110, 130, 100, 40);
            exploitButton.autoresizingMask = UIViewAutoresizingFlexibleLeftMargin;
            [exploitButton setTitle:@"Exploit" forState:UIControlStateNormal];
            exploitButton.backgroundColor = [UIColor colorWithRed:0.8 green:0.2 blue:0.2 alpha:0.8];
            exploitButton.layer.cornerRadius = 8.0;
            [exploitButton setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
            exploitButton.enabled = NO;
            exploitButton.tag = 105;
            [detailsView addSubview:exploitButton];
            
            // Set exploit button action
            [exploitButton addTarget:nil action:@selector(exploitButtonTapped:) forControlEvents:UIControlEventTouchUpInside];
            
            IMP exploitButtonAction = imp_implementationWithBlock(^(id _Nullable sender) {
                if (weakSelf && weakSelf->m_exploitButtonCallback && weakSelf->m_selectedVulnerabilityIndex >= 0) {
                    std::lock_guard<std::mutex> lock(weakSelf->m_vulnerabilitiesMutex);
                    if (weakSelf->m_selectedVulnerabilityIndex < weakSelf->m_vulnerabilities.size()) {
                        weakSelf->m_exploitButtonCallback(weakSelf->m_vulnerabilities[weakSelf->m_selectedVulnerabilityIndex]);
                    }
                }
            });
            
            class_addMethod([UIButton class], @selector(exploitButtonTapped:), exploitButtonAction, "v@:@");
            
            m_exploitButton = (__bridge_retained void*)exploitButton;
            m_detailsView = (__bridge_retained void*)detailsView;
            
            // Configure table view with data source and delegate
            tableView.dataSource = [[VulnTableViewDataSource alloc] initWithViewController:(__bridge id)this];
            tableView.delegate = [[VulnTableViewDelegate alloc] initWithViewController:(__bridge id)this];
            
            // Initial UI update
            UpdateUI();
        }
        
        void VulnerabilityViewController::UpdateUI() {
            dispatch_async(dispatch_get_main_queue(), ^{
                // Update scan button state
                UIButton* scanButton = (__bridge UIButton*)m_scanButton;
                scanButton.enabled = !m_scanInProgress;
                scanButton.alpha = m_scanInProgress ? 0.5 : 1.0;
                
                // Update progress indicator
                UIProgressView* progressView = (__bridge UIProgressView*)m_progressIndicator;
                progressView.hidden = !m_scanInProgress;
                progressView.progress = m_scanProgress;
                
                // Reload table view
                UITableView* tableView = (__bridge UITableView*)m_resultsTableView;
                [tableView reloadData];
                
                // Update details view
                if (m_selectedVulnerabilityIndex >= 0) {
                    ShowVulnerabilityDetails(m_selectedVulnerabilityIndex);
                } else {
                    UIView* detailsView = (__bridge UIView*)m_detailsView;
                    UILabel* titleLabel = (UILabel*)[detailsView viewWithTag:101];
                    UILabel* descriptionLabel = (UILabel*)[detailsView viewWithTag:102];
                    UILabel* severityLabel = (UILabel*)[detailsView viewWithTag:103];
                    UILabel* reliabilityLabel = (UILabel*)[detailsView viewWithTag:104];
                    UIButton* exploitButton = (UIButton*)[detailsView viewWithTag:105];
                    
                    titleLabel.text = @"Select a vulnerability";
                    descriptionLabel.text = @"";
                    severityLabel.text = @"Severity: N/A";
                    reliabilityLabel.text = @"Reliability: N/A";
                    exploitButton.enabled = NO;
                }
            });
        }
        
        void VulnerabilityViewController::UpdateProgress(float progress, const std::string& status) {
            m_scanProgress = progress;
            
            dispatch_async(dispatch_get_main_queue(), ^{
                UIProgressView* progressView = (__bridge UIProgressView*)m_progressIndicator;
                progressView.progress = progress;
            });
        }
        
        void VulnerabilityViewController::ShowVulnerabilityDetails(int index) {
            std::lock_guard<std::mutex> lock(m_vulnerabilitiesMutex);
            
            if (index < 0 || index >= m_vulnerabilities.size()) {
                return;
            }
            
            const auto& vulnerability = m_vulnerabilities[index];
            
            dispatch_async(dispatch_get_main_queue(), ^{
                UIView* detailsView = (__bridge UIView*)m_detailsView;
                UILabel* titleLabel = (UILabel*)[detailsView viewWithTag:101];
                UILabel* descriptionLabel = (UILabel*)[detailsView viewWithTag:102];
                UILabel* severityLabel = (UILabel*)[detailsView viewWithTag:103];
                UILabel* reliabilityLabel = (UILabel*)[detailsView viewWithTag:104];
                UIButton* exploitButton = (UIButton*)[detailsView viewWithTag:105];
                
                titleLabel.text = [NSString stringWithUTF8String:vulnerability.m_name.c_str()];
                descriptionLabel.text = [NSString stringWithUTF8String:vulnerability.m_description.c_str()];
                
                // Format severity with percentage
                int severityPercent = static_cast<int>(vulnerability.m_severity * 100);
                severityLabel.text = [NSString stringWithFormat:@"Severity: %d%%", severityPercent];
                
                // Format reliability with percentage
                int reliabilityPercent = static_cast<int>(vulnerability.m_reliability * 100);
                reliabilityLabel.text = [NSString stringWithFormat:@"Reliability: %d%%", reliabilityPercent];
                
                // Color code severity
                if (vulnerability.m_severity >= 0.7f) {
                    severityLabel.textColor = [UIColor colorWithRed:1.0 green:0.3 blue:0.3 alpha:1.0];
                } else if (vulnerability.m_severity >= 0.4f) {
                    severityLabel.textColor = [UIColor colorWithRed:1.0 green:0.7 blue:0.3 alpha:1.0];
                } else {
                    severityLabel.textColor = [UIColor colorWithRed:0.3 green:0.7 blue:0.3 alpha:1.0];
                }
                
                // Enable exploit button
                exploitButton.enabled = true;
            });
        }
    }
}

// Objective-C helper classes for table view
@interface VulnTableViewDataSource : NSObject <UITableViewDataSource>
- (instancetype)initWithViewController:(id)viewController;
@end

@interface VulnTableViewDelegate : NSObject <UITableViewDelegate>
- (instancetype)initWithViewController:(id)viewController;
@end

@implementation VulnTableViewDataSource {
    __unsafe_unretained iOS::UI::VulnerabilityViewController* _viewController;
}

- (instancetype)initWithViewController:(id)viewController {
    self = [super init];
    if (self) {
        _viewController = (__bridge iOS::UI::VulnerabilityViewController*)viewController;
    }
    return self;
}

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {
    std::lock_guard<std::mutex> lock(_viewController->m_vulnerabilitiesMutex);
    return _viewController->m_vulnerabilities.size();
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {
    static NSString *cellId = @"VulnerabilityCell";
    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:cellId];
    
    if (!cell) {
        cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleSubtitle reuseIdentifier:cellId];
        cell.backgroundColor = [UIColor clearColor];
        cell.textLabel.textColor = [UIColor whiteColor];
        cell.detailTextLabel.textColor = [UIColor lightGrayColor];
    }
    
    // Get vulnerability info
    std::lock_guard<std::mutex> lock(_viewController->m_vulnerabilitiesMutex);
    if (indexPath.row < _viewController->m_vulnerabilities.size()) {
        const auto& vulnerability = _viewController->m_vulnerabilities[indexPath.row];
        cell.textLabel.text = [NSString stringWithUTF8String:vulnerability.m_name.c_str()];
        
        // Get type as string
        std::string typeStr = iOS::AIFeatures::VulnerabilityDetection::VulnerabilityDetector::VulnerabilityTypeToString(vulnerability.m_type);
        cell.detailTextLabel.text = [NSString stringWithFormat:@"Type: %s", typeStr.c_str()];
        
        // Set cell color based on severity
        UIView *bgView = [[UIView alloc] init];
        if (vulnerability.m_severity >= 0.7f) {
            bgView.backgroundColor = [UIColor colorWithRed:0.5 green:0.0 blue:0.0 alpha:0.3];
        } else if (vulnerability.m_severity >= 0.4f) {
            bgView.backgroundColor = [UIColor colorWithRed:0.5 green:0.3 blue:0.0 alpha:0.3];
        } else {
            bgView.backgroundColor = [UIColor colorWithRed:0.0 green:0.3 blue:0.0 alpha:0.3];
        }
        cell.selectedBackgroundView = bgView;
    }
    
    return cell;
}

@end

@implementation VulnTableViewDelegate {
    __unsafe_unretained iOS::UI::VulnerabilityViewController* _viewController;
}

- (instancetype)initWithViewController:(id)viewController {
    self = [super init];
    if (self) {
        _viewController = (__bridge iOS::UI::VulnerabilityViewController*)viewController;
    }
    return self;
}

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath {
    _viewController->m_selectedVulnerabilityIndex = indexPath.row;
    _viewController->ShowVulnerabilityDetails(indexPath.row);
}

- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath {
    return 60.0f;
}

@end
